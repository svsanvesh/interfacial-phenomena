# Flow inside a planar wedge
# Changes from version - 0:
# 1. Box has been translated with origin now at the top-left corner
# 2. Grid has been refined near the contact line

1 0 GfsSimulation GfsBox GfsGEdge {
  x = 0.5 y = -0.5
} {

# Stop the simulation at t = 300 if convergence has not been reached before
  Time { end = 1 }

  # Use an initial refinement of 6 levels (i.e. 2^6=64x64)
#  Refine 5
  Refine {
    double r = sqrt(x*x + y*y);
    return r > 0.5 ? 6 : r > 0.25 ? 7 : 8;
    }

  # Set a viscosity source term on the velocity vector with x-component U
  # The Reynolds number is Re = L*U/Nu = 1*1/1e-3 = 1000
  SourceDiffusion {} U 1e-3
  SourceDiffusion {} V 1e-3

  Solid ({
      return -(y+x);
  })
#  # Dirichlet boundary condition for velocity
    #SurfaceBc U Neumann 0
    #SurfaceBc V Neumann 0
    SurfaceBC P Dirichlet 1.0


  # Use an initial refinement of 6 levels (i.e. 2^6=64x64 for each
  #   # box) only around the solid boundary
  RefineSolid 8

  # Stops the simulation if the maximum of the absolute value of the
  # difference between the current U field and the U field 10 timesteps
  # before is smaller than 1e-4.
  #
  # Stores this difference in the DU field (this can be used for
  # monitoring the convergence of the simulation).
  EventStop { istep = 10 } U 1e-4 DU
  GfsOutputTime    { istep = 10} stdout
  OutputSimulation { start = end } end.gfs

}
GfsBox {

  # Dirichlet boundary conditions for both components of the velocity on all sides:
  # - non-slip (U = V = 0) on right, left and bottom boundaries
  # - tangential velocity equal to 1 (U = 1) on top boundary

#  top = Boundary {
#    BcDirichlet U 1
#    BcDirichlet V 0
#  }
  bottom = BoundaryOutflow
  right = Boundary {
    BcDirichlet U 0
    BcDirichlet V 0
  }
  left = Boundary {
    BcDirichlet U 0
    BcDirichlet V -1
  }
}
