#re=0.3045;
# This code is writted with two vertical boxes as the domain with interface in the middle. The centre(0,0) is at the centre of the top box. 
# Edited by : Anvesh 
# Status : working 
#
#acute = obtuse angle in water (30)
#2D couette flow
# SI systems of units used for non-dimensionalising the results.
#simulation time is 50 seconds
# Domain 15x15 mmxmm.



1 0 GfsSimulation GfsBox GfsGEdge {} {
    GfsGlobal {  
	#define rhoG 1           //density 
        #define rhoL 1000
        #define muG 0.0183e-3
	#define muL 0.89e-3
	#define g -9.81          // gravitational acceleration
        #define sigmaL1 0.072    // surface tension

        #define Uplate -0.000025   // in m/s = 0.025 mm/sec = 25 micrometer/sec
        #define theta 30       // (30)
        #define Lc sqrt(sigmaL1/((rhoL-rhoG)*g)   // capillary length
        #define Ldomain 0.015   // Domain size perpendicular to the moving plate.

//From here onwards we define the 9 constants for the 8 degree polynomial we are
//fitting for the initial meniscus shape from the 
//final steady state shape from earlier simulations

        #define p1  9.3395e+13 
        #define p2  -5.3835e+11
        #define p3 -6.1069e+09
        #define p4 2.0621e+07
        #define p5 2.8029e+05 
        #define p6 -1.6932e+03
        #define p7 8.148
        #define p8 -0.0486
        #define p9 -0.0004953

        // refinement parameters
        static int ref_max = 14;    // Note: ref_max-8 > ref_min
        static int ref_min = 5;
        static int ref_domain = 4;

        #define x0 -Ldomain/2
        #define x1 -Ldomain/2 + Ldomain/600
        #define x2 -Ldomain/2 + Ldomain/300
        #define x3 -Ldomain/2 + Ldomain/150
        #define x4 -Ldomain/2 + Ldomain/75
        #define x5 -Ldomain/2 + Ldomain/35
        #define x6 -Ldomain/2 + Ldomain/20
        #define x7 -Ldomain/2 + Ldomain/8
        #define x8 -Ldomain/2 + Ldomain/3
        #define x9 -Ldomain/2 + Ldomain/1.5
	}
   

        # Define filtered B field
	VariableTracerVOFHeight {} B
	GfsVariableFiltered B1 B 1
	#GfsAdaptGradient { istep = 1 } { minlevel = 4 maxlevel = 6 cmax=1e-2 } B1
        
	# Define grid refinement
	Refine ref_domain
        #GfsAdaptGradient { istep = 1 }{cmax = 1e-2 maxlevel = 9  minlevel =4 } B1
	
	#GfsAdaptGradient { istep = 1 }{cmax = 1e-2 maxlevel = (x < x1 ? ( x < x2 ? (x < x3 ? 8 : 7) : 6) :5)   minlevel =5 } B1
#
#	GfsAdaptGradient { istep = 1 }{cmax = 1e-2 maxlevel = (x < x1 ?  ref_max : (x < x2 ? ref_max-1 : (x < x3 ? ref_max-2 : (x < x4 ? ref_max-3: (x < x5 ? ref_max-4 : ref_min) ) ) ) )   minlevel = ref_min } B1

	GfsAdaptGradient { istep = 1 }{cmax = 1e-2 maxlevel = (x < x1 ?  ref_max : (x < x2  ? ref_max-1 : (x < x3 ? ref_max-2 : (x < x4 ? ref_max-3: (x < x5 ? ref_max-4 : (x < x6 ? ref_max-5 : (x < x7 ? ref_max-6 : (x < x8 ? ref_max-7 : (x < x9 ? ref_max-8 : ref_min ) ) ) ) ) ) ) ) )   minlevel = ref_min } B1


#	GfsAdaptGradient { istep = 1 }{cmax = 1e-2 maxlevel = (x < 0.010125 ? ( x < 0.00675 ? (x < 0.0 ? (x  < -0.00675  ? (x < -0.010125 ?  6 :6 ):6) : 6): 7) : 8)  minlevel =5 } B1
        
	
	# Define physical parameters
	GfsVariableCurvature KB B KBmax
        GfsSourceTension B sigmaL1 KB
	Source {} V g
	GfsPhysicalParams { L = 0.015 alpha = 1./(B1*rhoL+(1-B1)*rhoG) }  #domain size is here 

        SourceViscosity {} ((muL*B1+(1-B1)*muG))
	 
        # Balance the number of elements across parallel subdomains at every
        # timestep if the imbalance is larger than 0.1 (i.e. 10% difference
        # between the largest and smallest subdomains).
          EventBalance { istep = 1 } 0.1

        # Running the simulation here
	GfsTime { start =0 end = 30}  
	GfsInitFraction {} B (- y + ( p1*x*x*x*x*x*x*x*x + p2*x*x*x*x*x*x*x + p3*x*x*x*x*x*x + p4*x*x*x*x*x + p5*x*x*x*x + p6*x*x*x + p7*x*x + p8*x + p9) )   # initial interface position

        # Saving the output
        OutputTime { istep = 20 } stderr
	OutputSimulation { start=0 step=0.001} alpha-%g.gfs {variables = B,U,V,P}
#	OutputPPM {step=.001} { ppm2mpeg > t.mpg } {	min = 0 max = 1 v = B	}

}
#box 1      
	GfsBox {
	  top = Boundary {	
	     BcDirichlet U 0
             BcDirichlet V 0
          }
          bottom = Boundary {
             BcDirichlet U 0
             BcDirichlet V 0 
          }
          right = Boundary {
             BcDirichlet U 0
             BcDirichlet V 0 
             BcAngle B 90
          }
          left = Boundary {
             BcDirichlet U 0
             BcDirichlet V Uplate
             BcAngle B theta
          }
        }

